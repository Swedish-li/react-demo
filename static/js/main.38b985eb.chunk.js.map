{"version":3,"sources":["components/Container.tsx","components/Loader.tsx","theme/index.tsx","routes/index.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","size","dualRing","keyframes","Loader","theme","primary","color","AppLoader","darkTheme","backgroundColor","lightTheme","DARK","LIGHT","AppThemeContext","React","createContext","toggleTheme","Provider","LOCAL_STORE_KEY","getDefaultTheme","t","localTheme","localStorage","getItem","window","matchMedia","matches","AppThemeProvider","children","useState","appTheme","setAppTheme","value","newTheme","setItem","Home","lazy","Intl","CounterView","FormikForm","Routes","path","exact","AppWrapper","absorbEvent_","event","e","preventDefault","stopPropagation","cancelBubble","returnValue","init","node","nodeList","document","getElementsByTagName","n","length","ontouchstart","ontouchmove","ontouchend","ontouchcancel","App","Suspense","fallback","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","incrementIfOdd","dispatch","getState","store","configureStore","reducer","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38b985eb.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\n","import styled, { keyframes } from \"styled-components\";\nimport { Container } from \"./Container\";\n// const color = \"#764ABC\";\nconst size = \"3.5em\";\nconst lineWidth = \".3em\";\n\nconst dualRing = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst Loader = styled.div`\n  &:after {\n    content: \" \";\n    display: block;\n    width: ${size};\n    height: ${size};\n    margin: 8px;\n    border-radius: 50%;\n    border: ${lineWidth} solid ${({ theme }) => theme.primary.color};\n    border-color: ${({ theme }) => theme.primary.color} transparent\n      ${({ theme }) => theme.primary.color} transparent;\n\n    animation: ${dualRing} 1.2s linear infinite;\n  }\n`;\n\nexport const AppLoader = () => (\n  <Container>\n    <Loader />\n  </Container>\n);\n","import React, { FC, useState } from \"react\";\nimport { DefaultTheme, ThemeProvider } from \"styled-components\";\n\nconst darkTheme: DefaultTheme = {\n  primary: {\n    color: \"#ba8fff\",\n    backgroundColor: \"#282c35\",\n  },\n};\n\nconst lightTheme: DefaultTheme = {\n  primary: {\n    color: \"#764abc\",\n    backgroundColor: \"#fff\",\n  },\n};\n\nconst DARK = \"dark\";\nconst LIGHT = \"light\";\n\nexport type AppThemeType = typeof DARK | typeof LIGHT;\n\ninterface AppThemeContextType {\n  theme: AppThemeType;\n  toggleTheme: () => void;\n}\n\nexport const AppThemeContext = React.createContext<AppThemeContextType>({\n  theme: LIGHT,\n  toggleTheme: () => undefined,\n});\n\nconst { Provider } = AppThemeContext;\n\nconst isAppTheme = (t: string | null): t is AppThemeType =>\n  t === DARK || t === LIGHT;\n\nconst LOCAL_STORE_KEY = \"app.theme\";\n\nconst getDefaultTheme = (): AppThemeType => {\n  const localTheme = localStorage.getItem(LOCAL_STORE_KEY);\n  if (isAppTheme(localTheme)) {\n    return localTheme;\n  }\n  const userPrefersLight =\n    window.matchMedia &&\n    window.matchMedia(\"(prefers-color-scheme: light)\").matches;\n  return userPrefersLight ? LIGHT : DARK;\n};\n\nconst AppThemeProvider: FC = ({ children }) => {\n  const [appTheme, setAppTheme] = useState<AppThemeType>(getDefaultTheme());\n\n  const theme = appTheme === DARK ? darkTheme : lightTheme;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Provider\n        value={{\n          theme: appTheme,\n          toggleTheme: () => {\n            const newTheme = appTheme === DARK ? LIGHT : DARK;\n            localStorage.setItem(LOCAL_STORE_KEY, newTheme);\n            setAppTheme(newTheme);\n          },\n        }}\n      >\n        {children}\n      </Provider>\n    </ThemeProvider>\n  );\n};\n\nexport default AppThemeProvider;\n","import { Switch, Route } from \"react-router-dom\";\nimport { lazy } from \"react\";\nconst Home = lazy(() => import(\"../view/Home\"));\nconst Intl = lazy(() => import(\"../view/intl\"));\nconst CounterView = lazy(() => import(\"../view/counter\"));\nconst FormikForm = lazy(() => import(\"../view/formik\"));\n\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route path=\"/\" exact>\n        <Home />\n      </Route>\n      <Route path=\"/counter\">\n        <CounterView />\n      </Route>\n      <Route path=\"/intl\">\n        <Intl />\n      </Route>\n      <Route path=\"/formik\">\n        <FormikForm />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default Routes;\n","// import \"./App.css\";\nimport Routes from \"./routes\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport React from \"react\";\nimport { AppLoader } from \"./components\";\nimport styled from \"styled-components\";\n\nconst AppWrapper = styled.div`\n  color: ${({ theme }) => theme.primary.color};\n  background-color: ${({ theme }) => theme.primary.backgroundColor};\n`;\nfunction absorbEvent_(event: TouchEvent) {\n  var e = event || window.event;\n  e.preventDefault && e.preventDefault();\n  e.stopPropagation && e.stopPropagation();\n  e.cancelBubble = true;\n  e.returnValue = false;\n  return false;\n}\n\nfunction preventLongPressMenu(node: HTMLElement) {\n  node.ontouchstart = absorbEvent_;\n  node.ontouchmove = absorbEvent_;\n  node.ontouchend = absorbEvent_;\n  node.ontouchcancel = absorbEvent_;\n}\n\nexport function init() {\n  const nodeList = document.getElementsByTagName(\"a\");\n  for (let n = 0; n < nodeList.length; n++) {\n    preventLongPressMenu(nodeList[n]);\n  }\n}\ninit();\nfunction App() {\n  return (\n    <AppWrapper>\n      <React.Suspense fallback={<AppLoader />}>\n        <Router>\n          <Routes />\n        </Router>\n      </React.Suspense>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport AppThemeProvider from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppThemeProvider>\n        <App />\n      </AppThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}